{"version":3,"sources":["EdgeList.tsx","Grid.tsx","GridSizePicker.tsx","App.tsx","index.tsx"],"names":["EdgeList","id","rows","cols","onChange","console","log","value","onClick","Component","Grid","props","canvasReference","redraw","current","Error","ctx","getContext","clearRect","width","height","state","backgroundImage","drawImage","coordinates","getCoordinates","coordinate","drawCircle","temp","size","arr","Array","i","map","j","k","board","fill","row","fillStyle","radius","Math","min","beginPath","arc","PI","React","createRef","this","fetchAndSaveImage","background","Image","onload","setState","src","ref","GridSizePicker","onInputChange","event","newSize","parseInt","target","type","max","App","updateGridSize","gridSize","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.be29201d.chunk.js","sourcesContent":["/*\r\n * Copyright (C) 2021 Kevin Zatloukal.  All rights reserved.  Permission is\r\n * hereby granted to students registered for University of Washington\r\n * CSE 331 for use solely during Spring Quarter 2021 for purposes of\r\n * the course.  No other use, copying, distribution, or modification\r\n * is permitted without prior written consent. Copyrights for\r\n * third-party components of this work must be honored.  Instructors\r\n * interested in reusing these course materials should contact the\r\n * author.\r\n */\r\n\r\nimport React, {Component} from 'react';\r\n\r\ninterface EdgeListProps {\r\n    onChange(edges: any): void;  // called when a new edge list is ready\r\n                                 // once you decide how you want to communicate the edges to the App, you should\r\n                                 // change the type of edges so it isn't `any`\r\n}\r\n\r\n/**\r\n * A text field that allows the user to enter the list of edges.\r\n * Also contains the buttons that the user will use to interact with the app.\r\n */\r\nclass EdgeList extends Component<EdgeListProps> {\r\n    render() {\r\n        return (\r\n            <div id=\"edge-list\">\r\n                Edges <br/>\r\n                <textarea\r\n                    rows={5}\r\n                    cols={30}\r\n                    onChange={() => {console.log('textarea onChange was called');}}\r\n                    value={\"I'm stuck...\"}\r\n                /> <br/>\r\n                <button onClick={() => {console.log('Draw onClick was called');}}>Draw</button>\r\n                <button onClick={() => {console.log('Clear onClick was called');}}>Clear</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EdgeList;\r\n","/*\r\n * Copyright (C) 2021 Kevin Zatloukal.  All rights reserved.  Permission is\r\n * hereby granted to students registered for University of Washington\r\n * CSE 331 for use solely during Spring Quarter 2021 for purposes of\r\n * the course.  No other use, copying, distribution, or modification\r\n * is permitted without prior written consent. Copyrights for\r\n * third-party components of this work must be honored.  Instructors\r\n * interested in reusing these course materials should contact the\r\n * author.\r\n */\r\n\r\nimport React, {Component} from 'react';\r\n\r\ninterface GridProps {\r\n    size: number;    // size of the grid to display\r\n    width: number;   // width of the canvas on which to draw\r\n    height: number;  // height of the canvas on which to draw\r\n}\r\n\r\ninterface GridState {\r\n    backgroundImage: any,  // image object rendered into the canvas (once loaded)\r\n}\r\n\r\n/**\r\n *  A simple grid with a variable size\r\n *\r\n *  Most of the assignment involves changes to this class\r\n */\r\nclass Grid extends Component<GridProps, GridState> {\r\n\r\n    canvasReference: React.RefObject<HTMLCanvasElement>\r\n\r\n    constructor(props: GridProps) {\r\n        super(props);\r\n        this.state = {\r\n            backgroundImage: null  // An image object to render into the canvas.\r\n        };\r\n        this.canvasReference = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Since we're saving the image in the state and re-using it any time we\r\n        // redraw the canvas, we only need to load it once, when our component first mounts.\r\n        this.fetchAndSaveImage();\r\n        this.redraw();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.redraw()\r\n    }\r\n\r\n    fetchAndSaveImage() {\r\n        // Creates an Image object, and sets a callback function\r\n        // for when the image is done loading (it might take a while).\r\n        const background = new Image();\r\n        background.onload = () => {\r\n            this.setState({\r\n                backgroundImage: background\r\n            });\r\n        };\r\n        // Once our callback is set up, we tell the image what file it should\r\n        // load from. This also triggers the loading process.\r\n        background.src = \"./image.jpg\";\r\n    }\r\n\r\n    redraw = () => {\r\n        if (this.canvasReference.current === null) {\r\n            throw new Error(\"Unable to access canvas.\");\r\n        }\r\n        const ctx = this.canvasReference.current.getContext('2d');\r\n        if (ctx === null) {\r\n            throw new Error(\"Unable to create canvas drawing context.\");\r\n        }\r\n\r\n        // First, let's clear the existing drawing so we can start fresh:\r\n        ctx.clearRect(0, 0, this.props.width, this.props.height);\r\n\r\n        // Once the image is done loading, it'll be saved inside our state, and we can draw it.\r\n        // Otherwise, we can't draw the image, so skip it.\r\n        if (this.state.backgroundImage !== null) {\r\n            ctx.drawImage(this.state.backgroundImage, 0, 0);\r\n        }\r\n\r\n        // Draw all the dots.\r\n        const coordinates = this.getCoordinates();\r\n        for (let coordinate of coordinates) {\r\n            this.drawCircle(ctx, coordinate);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns an array of coordinate pairs that represent all the points where grid dots should\r\n     * be drawn.\r\n     */\r\n    getCoordinates = (): [number, number][] => {\r\n        // A hardcoded 4x4 grid. Probably not going to work when we change the grid size...\r\n        const temp = (400-100) / this.props.size;\r\n        if (this.props.size === 1) {\r\n            return [[250, 250]];\r\n        }\r\n\r\n        let arr = new Array(this.props.size);\r\n        for (var i = 0; i < this.props.size; i++) {\r\n            arr[i] = new Array(this.props.size).map(rows => new Array(2));\r\n        }\r\n\r\n        for (var j = 0; j < this.props.size; j++) {\r\n            for (var k = 0; k < this.props.size; k++) {\r\n                arr[i][j] = [100+(temp*i), 400+(temp*j)];\r\n            }\r\n        }\r\n        let board = Array(2).fill(0).map(row => new Array(3).fill(1))\r\n        console.log(board);\r\n        return [\r\n            [100, 100], [100, 200], [100, 300], [100, 400],\r\n            [200, 100], [200, 200], [200, 300], [200, 400],\r\n            [300, 100], [300, 200], [300, 300], [300, 400],\r\n            [400, 100], [400, 200], [400, 300], [400, 400]\r\n        ];\r\n    };\r\n\r\n    drawCircle = (ctx: CanvasRenderingContext2D, coordinate: [number, number]) => {\r\n        ctx.fillStyle = \"white\";\r\n        // Generally use a radius of 4, but when there are lots of dots on the grid (> 50)\r\n        // we slowly scale the radius down so they'll all fit next to each other.\r\n        const radius = Math.min(4, 100 / this.props.size);\r\n        ctx.beginPath();\r\n        ctx.arc(coordinate[0], coordinate[1], radius, 0, 2 * Math.PI);\r\n        ctx.fill();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"grid\">\r\n                <canvas ref={this.canvasReference} width={this.props.width} height={this.props.height}/>\r\n                <p>Current Grid Size: {this.props.size}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Grid;\r\n","/*\r\n * Copyright (C) 2021 Kevin Zatloukal.  All rights reserved.  Permission is\r\n * hereby granted to students registered for University of Washington\r\n * CSE 331 for use solely during Spring Quarter 2021 for purposes of\r\n * the course.  No other use, copying, distribution, or modification\r\n * is permitted without prior written consent. Copyrights for\r\n * third-party components of this work must be honored.  Instructors\r\n * interested in reusing these course materials should contact the\r\n * author.\r\n */\r\n\r\n/* A simple TextField that only allows numerical input */\r\n\r\nimport React, {Component} from 'react';\r\n\r\ninterface GridSizePickerProps {\r\n    value: string;                    // text to display in the text area\r\n    onChange(newSize: number): void;  // called when a new size is picked\r\n}\r\n\r\nclass GridSizePicker extends Component<GridSizePickerProps> {\r\n\r\n    onInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        // Every event handler with JS can optionally take a single parameter that\r\n        // is an \"event\" object - contains information about an event. For mouse clicks,\r\n        // it'll tell you thinks like what x/y coordinates the click was at. For text\r\n        // box updates, it'll tell you the new contents of the text box, like we're using\r\n        // below.\r\n        //\r\n        // TODO - Not currently doing any validation or error handling. Should probably add some...\r\n        const newSize: number = parseInt(event.target.value);\r\n        this.props.onChange(newSize); // Tell our parent component about the new size.\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"grid-size-picker\">\r\n                <label>\r\n                    Grid Size:\r\n                    <input\r\n                        value={this.props.value}\r\n                        onChange={this.onInputChange}\r\n                        type=\"number\"\r\n                        min={1}\r\n                        max={100}\r\n                    />\r\n                </label>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GridSizePicker;\r\n","/*\r\n * Copyright (C) 2021 Kevin Zatloukal.  All rights reserved.  Permission is\r\n * hereby granted to students registered for University of Washington\r\n * CSE 331 for use solely during Spring Quarter 2021 for purposes of\r\n * the course.  No other use, copying, distribution, or modification\r\n * is permitted without prior written consent. Copyrights for\r\n * third-party components of this work must be honored.  Instructors\r\n * interested in reusing these course materials should contact the\r\n * author.\r\n */\r\n\r\nimport React, {Component} from 'react';\r\nimport EdgeList from \"./EdgeList\";\r\nimport Grid from \"./Grid\";\r\nimport GridSizePicker from \"./GridSizePicker\";\r\n\r\n// Allows us to write CSS styles inside App.css, any any styles will apply to all components inside <App />\r\nimport \"./App.css\";\r\n\r\ninterface AppState {\r\n    gridSize: number;  // size of the grid to display\r\n}\r\n\r\nclass App extends Component<{}, AppState> { // <- {} means no props.\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            gridSize: 4,\r\n        };\r\n    }\r\n\r\n    updateGridSize = (newSize: number) => {\r\n        this.setState({\r\n            gridSize: newSize\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const canvas_size = 500;\r\n        return (\r\n            <div>\r\n                <p id=\"app-title\">Connect the Dots!</p>\r\n                <GridSizePicker value={this.state.gridSize.toString()} onChange={this.updateGridSize}/>\r\n                <Grid size={this.state.gridSize} width={canvas_size} height={canvas_size}/>\r\n                <EdgeList onChange={(value) => {console.log(\"EdgeList onChange\", value)}}/>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default App;\r\n","/*\r\n * Copyright (C) 2021 Kevin Zatloukal.  All rights reserved.  Permission is\r\n * hereby granted to students registered for University of Washington\r\n * CSE 331 for use solely during Spring Quarter 2021 for purposes of\r\n * the course.  No other use, copying, distribution, or modification\r\n * is permitted without prior written consent. Copyrights for\r\n * third-party components of this work must be honored.  Instructors\r\n * interested in reusing these course materials should contact the\r\n * author.\r\n */\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}